<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>常用工具与插件推荐</title>
    <link href="/2021/05/11/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%B8%8E%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    <url>/2021/05/11/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%B8%8E%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<h1 id="常用工具推荐"><a href="#常用工具推荐" class="headerlink" title="常用工具推荐"></a>常用工具推荐</h1><blockquote><p>用作备忘，不定期更新</p></blockquote><h2 id="Windows-工具篇"><a href="#Windows-工具篇" class="headerlink" title="Windows 工具篇"></a>Windows 工具篇</h2><h3 id="uTools-工具集合"><a href="#uTools-工具集合" class="headerlink" title="uTools 工具集合"></a>uTools 工具集合</h3><p><a href="https://u.tools/"><code>uTools</code></a> 是一个工具集，有很多的开发者提供了很多很方便的功能，在特定的情境下可以很方便的启用一些特定的功能，例如在文件夹页面中快速打开 Everything 工具来对此文件夹下进行文件搜索，或者当你截取一张图片时，让它悬浮在最上层。<br>推荐的部分功能：</p><ul><li>本地搜索 ： 使用Everything来进行本地搜索。</li><li>Translate ： 翻译选中文本。</li><li>字数统计 ： 对选中的字数进行一些统计分析。</li><li>悬浮 ： 当截取图片等操作时，可以让图片悬浮在最上层。</li></ul><h3 id="aText"><a href="#aText" class="headerlink" title="aText"></a>aText</h3><p><a href="https://www.trankynam.com/atext/"><code>aText</code></a> 是一个文本模板、文本宏等功能的工具，可以方便快速的输入一些常用的文本，例如如果有一些非常无聊但是需要经常用到的代码，你可以直接输入一个你自己规定好的短语以及对应的代码，以后输入这个短语时，工具会帮你展开成对应的哪些代码，十分便捷。</p><h3 id="Typera"><a href="#Typera" class="headerlink" title="Typera"></a>Typera</h3><p><a href="https://www.trankynam.com/atext/"><code>Typera</code></a> 是一个非常简洁实用的Markdown编辑器。</p><h2 id="Visual-Studio-工具篇"><a href="#Visual-Studio-工具篇" class="headerlink" title="Visual Studio 工具篇"></a>Visual Studio 工具篇</h2><h3 id="Visual-Assist-X"><a href="#Visual-Assist-X" class="headerlink" title="Visual Assist X"></a>Visual Assist X</h3><p>Visual Assist X是一个很实用的C++的工具，用于进行UE开发非常方便。  </p><p><a href="https://zhuanlan.zhihu.com/p/56769102">配置推荐</a>  </p><p>另外，在每次打开工程时，VA会对工程进行分析，如果是大型工程的话，这个过程会非常缓慢，因此推荐关闭在打开时分析全工程选项：</p><p><img src="/images/pasted-1.png" alt="关闭在打开时分析全工程选项"></p><h2 id="Chrome工具篇"><a href="#Chrome工具篇" class="headerlink" title="Chrome工具篇"></a>Chrome工具篇</h2><h3 id="Youtube-双字幕"><a href="#Youtube-双字幕" class="headerlink" title="Youtube 双字幕"></a>Youtube 双字幕</h3><p>机翻字幕，双字幕便于对照。</p><h3 id="AdBlock-—-最佳广告拦截工具"><a href="#AdBlock-—-最佳广告拦截工具" class="headerlink" title="AdBlock — 最佳广告拦截工具"></a>AdBlock — 最佳广告拦截工具</h3><p>拦截掉浏览器的很多广告。</p><h3 id="Momentum"><a href="#Momentum" class="headerlink" title="Momentum"></a>Momentum</h3><p>新建页每日更新一张图，并且有TODO功能。</p><h3 id="为什么你们就是不能加个空格呢？"><a href="#为什么你们就是不能加个空格呢？" class="headerlink" title="为什么你们就是不能加个空格呢？"></a>为什么你们就是不能加个空格呢？</h3><p>优化页面显示效果。</p>]]></content>
    
    
    <categories>
      
      <category>Note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tool</tag>
      
      <tag>Note</tag>
      
      <tag>Chrome</tag>
      
      <tag>Windows</tag>
      
      <tag>Visual Studio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Behaviac 编辑器部分流程</title>
    <link href="/2021/05/10/Behaviac%20%E7%BC%96%E8%BE%91%E5%99%A8%E9%83%A8%E5%88%86%E6%B5%81%E7%A8%8B/"/>
    <url>/2021/05/10/Behaviac%20%E7%BC%96%E8%BE%91%E5%99%A8%E9%83%A8%E5%88%86%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Behaviac-编辑器部分流程"><a href="#Behaviac-编辑器部分流程" class="headerlink" title="Behaviac 编辑器部分流程"></a>Behaviac 编辑器部分流程</h1><h2 id="插件制作流程"><a href="#插件制作流程" class="headerlink" title="插件制作流程"></a>插件制作流程</h2><h3 id="插件基础"><a href="#插件基础" class="headerlink" title="插件基础"></a>插件基础</h3><p><a href="https://www.behaviac.com/tutorial9_extendnodes/">拓展节点类型</a></p><h2 id="新建节点流程"><a href="#新建节点流程" class="headerlink" title="新建节点流程"></a>新建节点流程</h2><h3 id="节点类型的加载"><a href="#节点类型的加载" class="headerlink" title="节点类型的加载"></a>节点类型的加载</h3><p>插件加载进去后，在 <code>Plugin</code> 的构造方法内会调用一些方法来注册节点信息：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Plugin.RegisterTypeHandlers(_DesignerBaseDll);<br>Plugin.RegisterAgentTypes(_DesignerBaseDll);<br>Plugin.InitNodeGroups();<br>Plugin.RegisterNodeDesc(_DesignerBaseDll);<br></code></pre></td></tr></table></figure><p>其中，<code>RegisterNodeDesc</code> 会根据节点的层次关系，生成一些描述节点。</p><p>这些描述节点会合并到 <code>Plugin</code> 类的 <code>NodeGroup</code> 类型的静态集合 <code>_nodeGroups</code> 中去， <code>NodeGroup</code> 是一种用于描述节点的、树状的结构类型。</p><p>在 <code>BehaviocTreeList</code> 类中有一个 <code>LoadPlugins</code> 方法会在 Workspace 发生变化的时候来进行调用，其会调用到一个 <code>ToggleShowSelectedNodes</code> 方法用于将刚刚得到的哪些描述信息来注册到 <code>TreeView</code> 来让屏幕上展示Node的结构，如下所示：</p><p><img src="/img/content/2021/5/Node%E7%BB%93%E6%9E%84.png"></p><p>此外，在这个方法内也会调用 <code>Register</code> 方法创建Node类型所对应的 <code>NodeTag</code> 以用于后续生成时所需的一些信息。</p><h3 id="节点拖拽创建的重要事件"><a href="#节点拖拽创建的重要事件" class="headerlink" title="节点拖拽创建的重要事件"></a>节点拖拽创建的重要事件</h3><p>以向行为树节点加入一个 <code>True</code> 节点为例：</p><p><img src="/img/content/2021/5/True%E8%8A%82%E7%82%B9.png"></p><p>在 <code>BehaviorTreeView</code> 类中有一个事件 <code>BehaviorTreeView_DragDrop</code> 会在你拖拽节点过来释放后触发，在经过多番校验后，会调用 <code>InsertNewNode</code> 方法来向目标节点进行插入新节点，根据对应的节点信息调用 <code> newnode = Node.Create(nodetag.NodeType)</code> 方法以创建新节点， <code>InsertNewNode</code>  方法签名如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 把从节点浏览器中拖拽过来的节点连接到一个现有的节点上</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;nvd&quot;&gt;</span> 被连接到的节点，即目标节点 <span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;mode&quot;&gt;</span> 连接的方式 <span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;nodetag&quot;&gt;</span> 你想要创建的节点的tag，里面有类型信息 <span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InsertNewNode</span>(<span class="hljs-params">NodeViewData nvd, NodeAttachMode mode, NodeTag nodetag, PointF mousePos</span>)</span><br></code></pre></td></tr></table></figure><p>在这个方法中，会有很多的类型判断以采取不同的方案，在本例中，则会调用到 <code>node.AddChild(_dragTargetConnector, newnode)</code> 以将新创建的节点联系到目标节点上，在这个函数调用中，里面会有 <code>connector.AcceptsChild(node)</code> 方法的调用，以判断该目标节点能否接收这个新节点。</p><h3 id="节点属性的绘制"><a href="#节点属性的绘制" class="headerlink" title="节点属性的绘制"></a>节点属性的绘制</h3><p>节点属性绘制以 <code>Action</code> 节点的 <code>Method</code> 属性为例，其绘制的效果如下：</p><p><img src="/img/content/2021/5/%E8%8A%82%E7%82%B9%E5%B1%9E%E6%80%A7%E7%BB%98%E5%88%B6.png"></p><p>在 <code>PropertiesDock</code> 类中，有一个 <code>SelectedObject</code> 属性用于保存当前选中的节点，在其 Set 函数中，会根据节点的类型来反射创建其相关属性，<code>Method</code> 即是其中之一。</p><p>在选中节点不为空的情况下，会调用方法 <code>UpdateProperties</code> 以绘制各属性。</p><p>在此方法中，会根据属性的类型，获取其对应的 Editor 的type，对于此例来说，调试的情况下可以看到类型是 <code>DesignerMethodComboEnumEditor</code> 。此类即Method属性的编辑器展示时的类型，其会缓存当前的Agent类型然后根据Agent的方法来改变枚举的值。</p>]]></content>
    
    
    <categories>
      
      <category>Winform Editor</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>Editor</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
